{
    "React AutoComplete Module": {
        "prefix": "ej2-react-autocomplete",
        "description": "React AutoComplete Module",
        "body": [
            "import * as React from 'react';",
            "import * as ReactDOM from 'react-dom';",
            "import { AutoCompleteComponent  } from '@syncfusion/ej2-react-dropdowns';",
            "export default class ${1:App} extends React.Component<{}, {}> {",
            "\tprivate dataSource: string[] = ['Badminton', 'Basketball', 'Cricket', 'Football', 'Golf', 'Gymnastics', 'Hockey', 'Rugby', 'Snooker', 'Tennis'];",
            "\trender() {",
            "\treturn (",
            "\t\t<AutoCompleteComponent id='atcelement' dataSource={this.${2:dataSource}} />",
            "\t);",
            "\t}",
            "\t}",
            "ReactDOM.render(<${1:App} />, document.getElementById('sample'));"
        ]
    },
    "React AutoComplete DataBinding Module": {
        "prefix": "ej2-react-autocomplete-ds-remote",
        "description": "React AutoComplete DataBinding Module",
        "body": [
            "import * as React from 'react';",
            "import * as ReactDOM from 'react-dom';",
            "import { AutoCompleteComponent } from '@syncfusion/ej2-react-dropdowns';",
            "import { Query, DataManager, ODataV4Adaptor } from '@syncfusion/ej2-data';",
            "export default class ${1:App} extends React.Component<{}, {}> {",
            "\tprivate dataSource: DataManager = new DataManager({",
            "\t\turl: 'http://services.odata.org/V4/Northwind/Northwind.svc/',",
            "\t\tadaptor: new ODataV4Adaptor,",
            "\t\tcrossDomain: true",
            "\t});",
            "\tprivate query: Query = new Query().from('Customers').select(['ContactName', 'CustomerID']).take(6);",
            "\t private fields: object = { text: 'ContactName', value: 'CustomerID' };",
            "\tprivate sortOrder: string = 'Ascending';",
            "\trender() {",
            "\treturn (",
            "\t\t<AutoCompleteComponent id='atcelement' query={this.query} dataSource={this.${2:dataSource}} fields={this.fields} sortOrder={this.sortOrder} placeholder='Select a customer' />",
            "\t);",
            "\t}",
            "}",
            "ReactDOM.render(<${1:App} />, document.getElementById('sample'));"
        ]
    },
    "React AutoComplete Filtering Module": {
        "prefix": "ej2-react-autocomplete-filter",
        "description": "React AutoComplete Filtering Module",
        "body": [
            "import * as React from 'react';",
            "import * as ReactDOM from 'react-dom';",
            "import { AutoCompleteComponent } from '@syncfusion/ej2-react-dropdowns';",
            "import { Query, DataManager, ODataV4Adaptor } from '@syncfusion/ej2-data';",
            "export default class ${1:App} extends React.Component<{}, {}> {",
            "\tconstructor() {",
            "\t\tsuper();",
            "\tthis.onFiltering = this.onFiltering.bind(this);",
            "\t}",
            "\tprivate dataSource: DataManager = new DataManager({",
            "\t\turl: 'http://services.odata.org/V4/Northwind/Northwind.svc/Customers',",
            "\t\tadaptor: new ODataV4Adaptor,",
            "\t\tcrossDomain: true",
            "\t});",
            " private fields: object = { value: 'ContactName' };",
            "private query: Query = new Query().select(['ContactName', 'CustomerID']).take(10);",
            "private sortOrder: string = 'Ascending';",
            "onFiltering(e: FilteringEventArgs) {",
            "if (e.text == '') e.updateData(this.searchData);",
            "else {",
            "if (e.text.length < 3) { return; }",
            "let query: Query = new Query().select(['ContactName', 'CustomerID']);",
            "query = (e.text !== '') ? query.where('ContactName', 'startswith', e.text, true) : query;",
            "e.updateData(this.searchData, query);",
            "}",
            "}",
            "\trender() {",
            "\treturn (",
            "\t\t<AutoCompleteComponent id='atcelement' filtering={this.${3:onFiltering}} query={this.${4:query}} dataSource={this.${2:dataSource}} sortOrder={this.${5:sortOrder}} fields={this.${6:fields}} placeholder='Find a customer' minLength={3}/>",
            "\t);",
            "\t}",
            "}",
            "ReactDOM.render(<${1:App} />, document.getElementById('sample'));"
        ]
    }
}